/* 
 * Copyright (c) 2013  Alex Dunn
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the 
 * Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * 
 * Here is the complete source for the pyroclastic explosions technique, use it wisely, and let me know if you get up to anything interesting with it.
 * 
 * Thanks,
 * Alex Dunn
 * 
 * Contact : alex_dunn@hotmail.com
 */

#pragma kernel PerlinNoise
#pragma kernel TurbulenceNoise

// General noise parameters.
float _Amplitude;
float _Frequency;
float3 _Animation;

// Turbulence specific parameters.
float _MinFrequency;
float _MaxFrequency;
float _QWidth;

// Volume noise is stored in after calculation.
RWTexture3D<float> _Output;

//-----------------------------------------------------------|
// Ken Perlins noise implementation in a compute shader.-----|
//-----------------------------------------------------------|
static const uint p[256] = { 151,160,137,91,90,15,
131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

static const float3 g[16] = 
{
    float3(1,1,0),
    float3(-1,1,0),
    float3(1,-1,0),
    float3(-1,-1,0),
    float3(1,0,1),
    float3(-1,0,1),
    float3(1,0,-1),
    float3(-1,0,-1), 
    float3(0,1,1),
    float3(0,-1,1),
    float3(0,1,-1),
    float3(0,-1,-1),
    float3(1,1,0),
    float3(0,-1,1),
    float3(-1,1,0),
    float3(0,-1,-1)
};

float3 fade(float3 t)			{ return t * t * t * (t * (t * 6 - 15) + 10); }
float grad(float x, float3 pos) { return dot(g[p[x % 256] % 16], pos); }

float Noise3D(float3 pos) 
{
	uint3 I = int3(floor(pos)) & 255;
	  
	pos = frac(pos);
	
	float3 fades = fade(pos);
		  
	uint A  = p[I.x     % 256] + I.y;
	uint AA = p[A       % 256] + I.z;
	uint AB = p[(A + 1) % 256] + I.z; 
	uint B  = p[(I.x+1) % 256] + I.y;
	uint BA = p[B       % 256] + I.z;
	uint BB = p[(B + 1) % 256] + I.z;

	return lerp(lerp(lerp(grad(AA,   pos),
						  grad(BA,   pos + float3(-1,  0,  0)), fades.x),
				     lerp(grad(AB,   pos + float3( 0, -1,  0)), 
						  grad(BB,   pos + float3(-1, -1,  0)), fades.x), fades.y),
				lerp(lerp(grad(AA+1, pos + float3( 0,  0, -1)), 
				   		  grad(BA+1, pos + float3(-1,  0, -1)), fades.x),
					 lerp(grad(AB+1, pos + float3( 0, -1, -1)),
						  grad(BB+1, pos + float3(-1, -1, -1)), fades.x), fades.y), fades.z);
}


// ------------------------------------------------------|
// Some additional noise helpers ------------------------|
// ------------------------------------------------------|
float Turbulence3D(float3 position, float minFreq, float maxFreq, float qWidth)
{
	float value = 0;
	float cutoff = clamp(0.5/qWidth, 0, maxFreq);
	float fade;
	float f;

	for (f = minFreq; f < 0.5*cutoff; f *= 2)
	{
		value += abs(Noise3D(position * f))/f;
	}

	fade = clamp(2*(cutoff-f)/cutoff, 0, 1);
	value += fade * abs(Noise3D(position * f))/f;

	return 1-value;
}


// ------------------------------------------------------|
// Compute Kernels --------------------------------------|
// ------------------------------------------------------|

// A kernel that simply calculates perlin noise and outputs it into a volume RWTexture.
[numthreads(8, 8, 8)]
void PerlinNoise (uint3 id : SV_DispatchThreadID)
{
	float3 position = float3(id.x, id.y, id.z) * _Frequency + _Animation;
    _Output[id] = Noise3D(position) * _Amplitude;
}

// A compute kernel that calculates turbulence noise, and stores in volume texture.
[numthreads(8, 8, 8)]
void TurbulenceNoise (uint3 id : SV_DispatchThreadID)
{
	float3 position = float3(id.x, id.y, id.z) * _Frequency + _Animation;
    _Output[id] = Turbulence3D(position, _MinFrequency, _MaxFrequency, _QWidth) * _Amplitude;
}